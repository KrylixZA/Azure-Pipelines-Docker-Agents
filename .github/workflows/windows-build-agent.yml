name: Windows Build Agent

on:
  push:
    paths:
      - 'src/build-agent/windows/**'
      - '.github/workflows/windows-build-agent.yml'
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

env:
    MAJOR_VERSION: 1
    MINOR_VERSION: 0
    PATCH_VERSION: 1
    DockerHubProfile: krylixza
    DockerRepo: azure/pipelines/build/agent/windows

jobs:
  setbuildversion:
    name: Set build version
    runs-on: windows-latest
    outputs:
      BUILD_VERSION: ${{ steps.definebuildnumber.outputs.BUILD_VERSION }}
    steps:
      - name: Define build version
        id: definebuildnumber
        run: |
          $buildNumber = "${{ env.MAJOR_VERSION }}.${{ env.MINOR_VERSION }}.${{ env.PATCH_VERSION }}.$env:GITHUB_RUN_NUMBER";
          $branchName = $env:GITHUB_REF -replace ".*/";
          $buildId = "$buildNumber";
          if ($branchName -ne "main") {
            $buildId = "$buildNumber-$branchName";
          }
          echo $buildId;
          echo "##[set-output name=BUILD_VERSION;]$(echo $buildId)";

  vs2019vs2022enterprise:
    name: vs2019 and vs2022 Enterprise
    runs-on: windows-latest
    needs: setbuildversion
    if: success()
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Docker login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          logout: true

      - name: Docker build
        working-directory: ./src/build-agent/windows/vs/enterprise/2019-2022
        run: docker build -t ${{ env.DockerHubProfile }}/${{ env.DockerRepo }}/vs/enteprise/20192022:${{ needs.setbuildversion.outputs.BUILD_VERSION }} -m 2GB .;
      
      - name: Docker push
        run: docker push ${{ env.DockerHubProfile }}/${{ env.DockerRepo }}/vs/enteprise/20192022:${{ needs.setbuildversion.outputs.BUILD_VERSION }};

      - name: Create latest tag
        if: success() && github.ref == 'refs/heads/main'
        run: |
          docker tag ${{ env.DockerHubProfile }}/${{ env.DockerRepo }}/vs/enteprise/20192022:${{ needs.setbuildversion.outputs.BUILD_VERSION }} ${{ env.DockerHubProfile }}/${{ env.DockerRepo }}/vs/enteprise/20192022:latest
          docker push ${{ env.DockerHubProfile }}/${{ env.DockerRepo }}/vs/enteprise/20192022:latest

  # prerelease:
  #   name: Create pre-release
  #   runs-on: ubuntu-latest
  #   needs: [ setbuildversion, build ]
  #   if: success() && github.ref != 'refs/heads/main'
  #   steps:
  #     - name: Create pre-release tag
  #       uses: ncipollo/release-action@v1
  #       with:
  #         allowUpdates: false
  #         prerelease: true
  #         name: ${{ needs.setbuildversion.outputs.BUILD_VERSION }}
  #         tag: ${{ needs.setbuildversion.outputs.BUILD_VERSION }}
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         body: |
  #           Docker Hub Page: [krylixza/azure-pipelines-windows-build-agent](https://hub.docker.com/r/krylixza/azure-pipelines-windows-build-agent/tags)
  #           To run: `docker run -e AZP_URL=https://dev.azure.com/<Your Org> -e AZP_TOKEN=<Your PAT> -e AZP_POOL=<Your Agent Pool> krylixza/azure-pipelines-windows-build-agent:${{ needs.setbuildversion.outputs.BUILD_VERSION }} [--once]`

  # release:
  #   name: Create release
  #   runs-on: ubuntu-latest
  #   needs: [ setbuildversion, build ]
  #   if: success() && github.ref == 'refs/heads/main'
  #   steps:
  #     - name: Create release tag
  #       uses: ncipollo/release-action@v1
  #       with:
  #         allowUpdates: false
  #         prerelease: false
  #         name: ${{ needs.setbuildversion.outputs.BUILD_VERSION }}
  #         tag: ${{ needs.setbuildversion.outputs.BUILD_VERSION }}
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #         body: |
  #           Docker Hub Page: [krylixza/azure-pipelines-windows-build-agent](https://hub.docker.com/r/krylixza/azure-pipelines-windows-build-agent/tags)
  #           To run: `docker run -e AZP_URL=https://dev.azure.com/<Your Org> -e AZP_TOKEN=<Your PAT> -e AZP_POOL=<Your Agent Pool> krylixza/azure-pipelines-windows-build-agent:${{ needs.setbuildversion.outputs.BUILD_VERSION }} [--once]`